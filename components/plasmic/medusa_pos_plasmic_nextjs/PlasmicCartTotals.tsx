// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: fcjEqjvkDDoj8fh9NrshcB
// Component: sZSdvb4zFpNZ

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { Button } from "@medusajs/ui"; // plasmic-import: kZJZcIPWQ7xC/codeComponent

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic.module.css"; // plasmic-import: fcjEqjvkDDoj8fh9NrshcB/projectcss
import sty from "./PlasmicCartTotals.module.css"; // plasmic-import: sZSdvb4zFpNZ/css

createPlasmicElementProxy;

export type PlasmicCartTotals__VariantMembers = {};
export type PlasmicCartTotals__VariantsArgs = {};
type VariantPropType = keyof PlasmicCartTotals__VariantsArgs;
export const PlasmicCartTotals__VariantProps = new Array<VariantPropType>();

export type PlasmicCartTotals__ArgsType = {};
type ArgPropType = keyof PlasmicCartTotals__ArgsType;
export const PlasmicCartTotals__ArgProps = new Array<ArgPropType>();

export type PlasmicCartTotals__OverridesType = {
  cartTotals?: Flex__<"div">;
  totalLabel?: Flex__<"div">;
  tatalValue?: Flex__<"div">;
};

export interface DefaultCartTotalsProps {
  className?: string;
}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicCartTotals__RenderFunc(props: {
  variants: PlasmicCartTotals__VariantsArgs;
  args: PlasmicCartTotals__ArgsType;
  overrides: PlasmicCartTotals__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  return (
    <div
      data-plasmic-name={"cartTotals"}
      data-plasmic-override={overrides.cartTotals}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        sty.cartTotals
      )}
    >
      <div className={classNames(projectcss.all, sty.freeBox__xzloq)}>
        <div
          data-plasmic-name={"totalLabel"}
          data-plasmic-override={overrides.totalLabel}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.totalLabel
          )}
        >
          {"Shipping:"}
        </div>
        <div
          data-plasmic-name={"tatalValue"}
          data-plasmic-override={overrides.tatalValue}
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.tatalValue
          )}
        >
          {"{value}"}
        </div>
      </div>
      <Stack__
        as={"div"}
        hasGap={true}
        className={classNames(projectcss.all, sty.freeBox__vfAha)}
      >
        <Button
          className={classNames("__wab_instance", sty.button__za54)}
          size={"xlarge"}
          variant={"secondary"}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__luxkc
            )}
          >
            {"Save Draft"}
          </div>
        </Button>
        <Button
          className={classNames("__wab_instance", sty.button__kDYkT)}
          size={"xlarge"}
          variant={"primary"}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text___0Xox7
            )}
          >
            {"Proceed to Fullfilment"}
          </div>
        </Button>
      </Stack__>
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  cartTotals: ["cartTotals", "totalLabel", "tatalValue"],
  totalLabel: ["totalLabel"],
  tatalValue: ["tatalValue"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  cartTotals: "div";
  totalLabel: "div";
  tatalValue: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicCartTotals__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicCartTotals__VariantsArgs;
    args?: PlasmicCartTotals__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicCartTotals__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicCartTotals__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicCartTotals__ArgProps,
          internalVariantPropNames: PlasmicCartTotals__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicCartTotals__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "cartTotals") {
    func.displayName = "PlasmicCartTotals";
  } else {
    func.displayName = `PlasmicCartTotals.${nodeName}`;
  }
  return func;
}

export const PlasmicCartTotals = Object.assign(
  // Top-level PlasmicCartTotals renders the root element
  makeNodeComponent("cartTotals"),
  {
    // Helper components rendering sub-elements
    totalLabel: makeNodeComponent("totalLabel"),
    tatalValue: makeNodeComponent("tatalValue"),

    // Metadata about props expected for PlasmicCartTotals
    internalVariantProps: PlasmicCartTotals__VariantProps,
    internalArgProps: PlasmicCartTotals__ArgProps
  }
);

export default PlasmicCartTotals;
/* prettier-ignore-end */
